{"version":3,"sources":["components/AddCategories.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategories","setCategories","useState","inputValue","setInputValue","className","onSubmit","e","preventDefault","trim","length","categories","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAwBeA,EArBO,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACHC,mBAAS,IADN,mBAChCC,EADgC,KACpBC,EADoB,KAYzC,OACE,sBAAMC,UAAU,SAASC,SARL,SAACC,GACjBA,EAAEC,iBACCL,EAAWM,OAAOC,OAAQ,IACzBT,GAAe,SAAAU,GAAU,OAAMR,GAAN,mBAAqBQ,OAC9CP,EAAc,MAItB,SACE,uBAAOC,UAAU,SAASO,KAAK,OAAOC,YAAY,cAAcC,MAAOX,EAAYY,SAZ3D,SAACR,GACvBH,EAAcG,EAAES,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,kDACkCC,UACrDH,GAFmB,gEAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVjB,kBAadM,GAbc,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEhC,OACI,sBAAKf,UAAU,6CAAf,UACI,qBAAK6B,IAAKd,EAAKe,IAAKL,IACpB,4BAAIA,QCHHM,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACdhB,mBAAS,CACjCuB,KAAM,GACNY,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAcxC,OATAC,qBAAU,WACRvB,EAAQC,GAAUuB,MAAK,SAACC,GACtBH,EAAS,CACPd,KAAMiB,EACNL,SAAS,SAGZ,CAACnB,IAEGoB,EDZ2BK,CAAczB,GAAlCa,EADyB,EAC9BN,KAAcY,EADgB,EAChBA,QAGvB,OACE,qCACE,6BAAKnB,IACJmB,GAAW,4CACZ,qBAAKhC,UAAU,YAAf,SACG0B,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,aAA0BA,IAAKA,GAASA,GAAtBA,EAAIC,aEWjBe,EArBM,WAAM,MAEW1C,mBAAS,CAAC,WAFrB,mBAElBS,EAFkB,KAENV,EAFM,KAOzB,OACE,qCACE,oBAAII,UAAU,QAAd,0BACA,mBAAGA,UAAU,cAAb,qCACA,cAAC,EAAD,CAAeJ,cAAeA,IAC9B,uBACA,6BACGU,EAAWgB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCPT2B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,SAM5BX,M","file":"static/js/main.72891bab.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AddCategories = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleIpuntChange = (e)=>{\r\n        setInputValue(e.target.value);\r\n    }\r\n    const handleSubmit= (e) => {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length >1){\r\n            setCategories( categories => [ inputValue, ...categories, ] );\r\n            setInputValue('');\r\n        }\r\n    }\r\n  return (\r\n    <form className=\"search\" onSubmit={handleSubmit}>\r\n      <input className=\"result\" type=\"text\" placeholder=\"Buscar gifs\" value={inputValue} onChange={handleIpuntChange}/>\r\n    </form>\r\n  );\r\n};\r\nAddCategories.propTypes ={\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\nexport default AddCategories;\r\n ","export const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q= ${encodeURI(\r\n    category\r\n  )} &limit=10&api_key=oMml8h6CNYBMNkqLiHfe5WOC2wJ4BWpx`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n  return gifs;\r\n};\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n    // console.log(id, title, url)\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInDown\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    const {data:images , loading} = useFetchGifs( category );\r\n\r\n\r\n  return (\r\n    <>\r\n      <h3>{category}</h3>\r\n      {loading && <p>Cargando...</p>}\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} img={img} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setstate({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport AddCategories from \"./components/AddCategories\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n  // const categories = ['memes','anime','fun','movies'];\r\n  const [categories, setCategories] = useState([\"Search\"]);\r\n  // const handleAdd = () => {\r\n  //     setCategories( [...categories, 'sad'] );\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <h2 className=\"title\">GifExpertApp</h2>\r\n      <p className=\"description\">Buscador de Gifs online</p>\r\n      <AddCategories setCategories={setCategories} />\r\n      <hr />\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\nexport default GifExpertApp;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <GifExpertApp />,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}